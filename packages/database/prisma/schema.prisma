// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================
// ENUMS
// =================================================

enum UserRole {
  CREATOR
  PROMOTER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BANNED
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum SocialPlatform {
  TIKTOK
  INSTAGRAM
}

enum MaterialType {
  GOOGLE_DRIVE
  YOUTUBE
  IMAGE
  VIDEO
}


// =================================================
// APPLICATION MODELS
// =================================================

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String?
  role          UserRole   @default(CREATOR)
  status        UserStatus @default(ACTIVE)
  lastActive    DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  campaigns     Campaign[]
  applications  CampaignApplication[]
  socialAccounts SocialAccount[]
  payouts       Payout[]
}

model SocialAccount {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform       SocialPlatform
  platformUserId String
  accessToken    String         @db.Text
  refreshToken   String?        @db.Text
  expiresAt      DateTime?
  createdAt      DateTime       @default(now())

  @@unique([platform, platformUserId])
}

model Campaign {
  id            String       @id @default(cuid())
  creatorId     String
  creator       User         @relation(fields: [creatorId], references: [id])
  
  title         String
  description   String?      @db.Text
  budget        Float
  ratePerView   Float
  status        CampaignStatus @default(DRAFT)
  requirements  Json?
  startDate     DateTime?
  endDate       DateTime?

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  materials     CampaignMaterial[]
  applications  CampaignApplication[]
  viewRecords   ViewRecord[]
  payouts       Payout[]
}

model CampaignMaterial {
  id          String       @id @default(cuid())
  campaignId  String
  campaign    Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  type        MaterialType
  url         String       @db.VarChar(1000)
  title       String       @db.VarChar(255)
  description String?      @db.Text
  createdAt   DateTime     @default(now())
}

model CampaignApplication {
  id                String            @id @default(cuid())
  campaignId        String
  campaign          Campaign          @relation(fields: [campaignId], references: [id])
  promoterId        String
  promoter          User              @relation(fields: [promoterId], references: [id])
  
  status            ApplicationStatus @default(PENDING)
  submittedContent  String?           @db.Text
  trackingLink      String            @unique
  appliedAt         DateTime          @default(now())
  reviewedAt        DateTime?
  
  viewRecords       ViewRecord[]
  trackingSessions  TrackingSession[]
  payouts           Payout[]
}

model ViewRecord {
  id              String    @id @default(cuid())
  applicationId   String
  application     CampaignApplication @relation(fields: [applicationId], references: [id])
  campaignId      String
  campaign        Campaign  @relation(fields: [campaignId], references: [id])
  promoterId      String
  
  platform        SocialPlatform
  contentId       String
  timestamp       DateTime
  viewCount       Int
  likeCount       Int
  commentCount    Int
  shareCount      Int
  botScore        Float
  isLegitimate    Boolean

  @@index([applicationId])
}

model TrackingSession {
  id              String    @id @default(cuid())
  applicationId   String
  application     CampaignApplication @relation(fields: [applicationId], references: [id])
  
  startTime       DateTime
  lastChecked     DateTime
  totalViews      Int
  legitimateViews Int
  isActive        Boolean
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Payout {
  id              String        @id @default(cuid())
  applicationId   String
  application     CampaignApplication @relation(fields: [applicationId], references: [id])
  campaignId      String
  campaign        Campaign      @relation(fields: [campaignId], references: [id])
  promoterId      String
  promoter        User          @relation(fields: [promoterId], references: [id])
  
  amount          Float
  status          PayoutStatus  @default(PENDING)
  processedAt     DateTime?
  failureReason   String?       @db.Text

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model PlatformRevenue {
  id              String      @id @default(cuid())
  periodStart     DateTime
  periodEnd       DateTime
  totalFees       Float
  withdrawnAmount Float
  availableBalance Float
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  withdrawals     Withdrawal[]
}

model Withdrawal {
  id              String        @id @default(cuid())
  revenueId       String
  revenue         PlatformRevenue @relation(fields: [revenueId], references: [id])
  
  amount          Float
  status          PayoutStatus  @default(PENDING)
  processedAt     DateTime?
  failureReason   String?       @db.Text
  createdAt       DateTime      @default(now())
}
